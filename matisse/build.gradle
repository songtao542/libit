/*
 * Copyright 2017 Zhihu Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
apply plugin: 'com.android.library'
apply plugin: 'checkstyle'

apply from: "../config.gradle"

android {
    compileSdk project.ext.compile_sdk

    namespace 'com.zhihu.matisse'

    defaultConfig {
        minSdk 14
        targetSdk project.ext.target_sdk

        // add by songtao --start--
        vectorDrawables.useSupportLibrary = true
        /*ndk {
            moduleName "ucrop"        //生成的so文件名字，调用C程序的代码中会用到该名字
            abiFilters 'armeabi-v7a', 'arm64-v8a' //, 'armeabi','x86', 'armeabi-v7a', 'x86_64'
        }
        externalNativeBuild {
            cmake {
                cppFlags ""
                abiFilters 'arm64-v8a', 'armeabi-v7a', 'x86', 'x86_64'
            }
        }*/
        // add by songtao --end--
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    // add by songtao --start--
    /*externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }*/
    sourceSets {
        main {
            res.srcDirs = ['src/main/res', 'src_crop/main/res']
            java.srcDirs = ['src/main/java', 'src_crop/main/java']
            jniLibs.srcDirs = ['src_crop/main/jniLibs']
        }
    }

    lint {
        abortOnError false
    }
    // add by songtao --end--
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "androidx.appcompat:appcompat:${project.androidx_appcompat__appcompat}"
    implementation "androidx.annotation:annotation:${project.androidx_annotation__annotation}"
    implementation "androidx.recyclerview:recyclerview:${project.androidx_recyclerview__recyclerview}"
    implementation "it.sephiroth.android.library.imagezoom:library:${project.it_sephiroth_android_library_imagezoom__library}"

    compileOnly "com.github.bumptech.glide:glide:${project.com_github_bumptech_glide__glide}"
    compileOnly "com.squareup.picasso:picasso:${project.com_squareup_picasso__picasso}"

    // add by songtao --start--
    implementation "androidx.exifinterface:exifinterface:${project.androidx_exifinterface__exifinterface}"
    implementation "com.squareup.okhttp3:okhttp:${project.com_squareup_okhttp3__okhttp}"
    implementation "com.squareup.okio:okio:${project.com_squareup_okio__okio}"
    implementation "androidx.transition:transition:${project.androidx_transition__transition}"
    implementation "androidx.transition:transition-ktx:${project.androidx_transition__transition_ktx}"
    // add by songtao --end--
}

checkstyle {
    toolVersion = '7.6.1'
}

tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('encoding', 'UTF-8')
}

task checkstyle(type: Checkstyle) {
    description 'Runs Checkstyle inspection against matisse sourcesets.'
    group = 'Code Quality'
    configFile rootProject.file('checkstyle.xml')
    ignoreFailures = false
    showViolations true
    classpath = files()
    source 'src/main/java'
}

// add by songtao --start--
if (file('internal-config.gradle').exists() && file('../binary-common.gradle').exists()) {
    apply from: '../binary-common.gradle'
}
// add by songtao --end--