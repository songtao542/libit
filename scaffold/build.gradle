plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-parcelize'
    id 'kotlinx-serialization'
    id 'kotlin-allopen'
    id 'kotlin-kapt'
    //id 'dagger.hilt.android.plugin'
    id 'com.google.dagger.hilt.android'
    id 'com.google.protobuf'
    id 'androidx.navigation.safeargs'
}

static def buildTime() {
    return new Date().format("yyMMdd", TimeZone.getTimeZone("GMT+08:00"))
}

static def getCurrentTime() {
    return new Date().format("yyyy-MM-dd HH:mm:ss", TimeZone.getTimeZone("GMT+08:00"))
}

preBuild {
    StringBuilder time = new StringBuilder()
    time.append("======================================\n")
    time.append("====pre build: ${getCurrentTime()}====\n")
    time.append("======================================\n")
    System.out.println(time)
}

gradle.addBuildListener(new BuildAdapter() {
    @Override
    void buildFinished(BuildResult result) {
        StringBuilder time = new StringBuilder()
        time.append("======================================\n")
        time.append("====end build: ${getCurrentTime()}====\n")
        time.append("======================================\t")
        System.out.println(time)
    }
})

apply from: "../config.gradle"

android {
    compileSdk project.ext.compile_sdk

    namespace 'com.scaffold'

    defaultConfig {
        applicationId "com.scaffold"
        minSdk 23
        targetSdk project.ext.target_sdk
        versionCode 1
        versionName "1.0.0_" + buildTime()

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        vectorDrawables.useSupportLibrary = true
    }

    signingConfigs {
        debug {
            keyAlias 'androiddebugkey'
            keyPassword 'android'
            storeFile file('./test.keystore')
            storePassword 'android'
        }
    }

    buildFeatures {
        viewBinding true
        dataBinding true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            //signingConfig signingConfigs.debug
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = "17"
    }

    lint {
        abortOnError false
    }
}

dependencies {
    //implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "androidx.appcompat:appcompat:${project.androidx_appcompat__appcompat}"
    implementation "androidx.activity:activity:${project.androidx_activity__activity}"
    implementation "androidx.activity:activity-ktx:${project.androidx_activity__activity_ktx}"
    implementation "androidx.core:core:${project.androidx_core__core}"
    implementation "androidx.core:core-ktx:${project.androidx_core__core_ktx}"
    implementation "androidx.fragment:fragment-ktx:${project.androidx_fragment__fragment_ktx}"
    implementation "androidx.lifecycle:lifecycle-extensions:${project.androidx_lifecycle__lifecycle_extensions}"
    implementation "androidx.legacy:legacy-support-v4:${project.androidx_legacy__legacy_support_v4}"
    implementation "androidx.annotation:annotation:${project.androidx_annotation__annotation}"
    //implementation "androidx.viewpager2:viewpager2:${project.androidx_viewpager2__viewpager2}"

    // glide库
    implementation "com.github.bumptech.glide:glide:${project.com_github_bumptech_glide__glide}"
    kapt "com.github.bumptech.glide:compiler:${project.com_github_bumptech_glide__compiler}"

    //debugImplementation "com.squareup.leakcanary:leakcanary-android:${project.com_squareup_leakcanary__leakcanary_android}"

    //implementation "org.jetbrains.kotlin:kotlin-stdlib:${project.org_jetbrains_kotlin__kotlin_stdlib}"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-core:${project.org_jetbrains_kotlinx__kotlinx_serialization_core}"
    //implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:${project.org_jetbrains_kotlinx__kotlinx_serialization_runtime}"

    //https://github.com/material-components/material-components-android
    implementation "com.google.android.material:material:${project.com_google_android_material__material}"

    implementation "androidx.constraintlayout:constraintlayout:${project.androidx_constraintlayout__constraintlayout}"
    testImplementation "junit:junit:${project.junit__junit}"
    androidTestImplementation "androidx.test.ext:junit:${project.androidx_test_ext__junit}"
    androidTestImplementation "androidx.test.espresso:espresso-core:${project.androidx_test_espresso__espresso_core}"

    implementation "com.google.dagger:hilt-android:${project.com_google_dagger__hilt_android}"
    kapt "com.google.dagger:hilt-compiler:${project.com_google_dagger__hilt_compiler}"
    //kapt "androidx.hilt:hilt-compiler:${project.androidx_hilt__hilt_compiler}"
    //implementation "androidx.hilt:hilt-lifecycle-viewmodel:${project.androidx_hilt__hilt_lifecycle_viewmodel}"
    //implementation "androidx.hilt:hilt-navigation-compose:${project.androidx_hilt__hilt_navigation_compose}"

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${project.org_jetbrains_kotlinx__kotlinx_coroutines_core}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:${project.org_jetbrains_kotlinx__kotlinx_coroutines_android}"
    implementation "io.reactivex.rxjava2:rxjava:${project.io_reactivex_rxjava2__rxjava}"
    implementation "io.reactivex.rxjava2:rxandroid:${project.io_reactivex_rxjava2__rxandroid}"
    implementation "io.reactivex.rxjava2:rxkotlin:${project.io_reactivex_rxjava2__rxkotlin}"

    // ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:${project.androidx_lifecycle__lifecycle_viewmodel_ktx}"
    implementation "androidx.lifecycle:lifecycle-livedata-core-ktx:${project.androidx_lifecycle__lifecycle_livedata_core_ktx}"
    // LiveData
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:${project.androidx_lifecycle__lifecycle_livedata_ktx}"
    // optional - ReactiveStreams support for LiveData
    implementation "androidx.lifecycle:lifecycle-reactivestreams-ktx:${project.androidx_lifecycle__lifecycle_reactivestreams_ktx}"
    // Lifecycles only (without ViewModel or LiveData)
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:${project.androidx_lifecycle__lifecycle_runtime_ktx}"

    implementation "androidx.lifecycle:lifecycle-common-java8:${project.androidx_lifecycle__lifecycle_common_java8}"
    implementation("androidx.recyclerview:recyclerview:${project.androidx_recyclerview__recyclerview}") {
        version {
            strictly '[1.2.0]'
            prefer '1.2.0'
        }
    }

    implementation "androidx.room:room-runtime:${project.androidx_room__room_runtime}"
    kapt "androidx.room:room-compiler:${project.androidx_room__room_compiler}"
    // optional - Kotlin Extensions and Coroutines support for Room
    implementation "androidx.room:room-ktx:${project.androidx_room__room_ktx}"

    // Java language implementation
    implementation "androidx.navigation:navigation-fragment:${project.androidx_navigation__navigation_fragment}"
    implementation "androidx.navigation:navigation-ui:${project.androidx_navigation__navigation_ui}"

    // Kotlin
    implementation "androidx.navigation:navigation-fragment-ktx:${project.androidx_navigation__navigation_fragment_ktx}"
    implementation "androidx.navigation:navigation-ui-ktx:${project.androidx_navigation__navigation_ui_ktx}"

    // Feature module Support
    implementation "androidx.navigation:navigation-dynamic-features-fragment:${project.androidx_navigation__navigation_dynamic_features_fragment}"

    //Retrofit网络请求
    implementation "com.squareup.retrofit2:retrofit:${project.com_squareup_retrofit2__retrofit}"
    implementation "com.squareup.retrofit2:converter-gson:${project.com_squareup_retrofit2__converter_gson}"
    implementation "com.squareup.retrofit2:adapter-rxjava2:${project.com_squareup_retrofit2__adapter_rxjava2}"
    //implementation "com.squareup.retrofit2:converter-scalars:${project.com_squareup_retrofit2__converter_scalars}"
    implementation "com.squareup.okhttp3:logging-interceptor:${project.com_squareup_okhttp3__logging_interceptor}"
    implementation "com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:${project.com_jakewharton_retrofit__retrofit2_kotlin_coroutines_adapter}"
    implementation "com.squareup.retrofit2:adapter-rxjava2:${project.com_squareup_retrofit2__adapter_rxjava2}"
    //implementation "com.squareup.retrofit2:converter-scalars:${project.com_squareup_retrofit2__converter_scalars}"
    implementation "com.squareup.okhttp3:logging-interceptor:${project.com_squareup_okhttp3__logging_interceptor}"

    //https://github.com/google/flexbox-layout
    implementation "com.google.android.flexbox:flexbox:${project.com_google_android_flexbox__flexbox}"

    // Typed DataStore (Typed API surface, such as Proto)
    implementation "androidx.datastore:datastore:${project.androidx_datastore__datastore}"
    // optional - RxJava2 support
    implementation "androidx.datastore:datastore-rxjava2:${project.androidx_datastore__datastore_rxjava2}"
    // optional - RxJava3 support
    implementation "androidx.datastore:datastore-rxjava3:${project.androidx_datastore__datastore_rxjava3}"
    // Alternatively - use the following artifact without an Android dependency.
    implementation "androidx.datastore:datastore-core:${project.androidx_datastore__datastore_core}"

    implementation "com.google.protobuf:protobuf-javalite:${project.com_google_protobuf__protobuf_javalite}"
    //implementation  "com.google.protobuf.nano:protobuf-javanano:${project.com_google_protobuf_nano__protobuf_javanano}"

    implementation "androidx.datastore:datastore-preferences:${project.androidx_datastore__datastore_preferences}"
    // optional - RxJava2 support
    implementation "androidx.datastore:datastore-preferences-rxjava2:${project.androidx_datastore__datastore_preferences_rxjava2}"
    // optional - RxJava3 support
    implementation "androidx.datastore:datastore-preferences-rxjava3:${project.androidx_datastore__datastore_preferences_rxjava3}"
    // Alternatively - use the following artifact without an Android dependency.
    implementation "androidx.datastore:datastore-preferences-core:${project.androidx_datastore__datastore_preferences_core}"

    // (Java only)
    implementation "androidx.work:work-runtime:${project.androidx_work__work_runtime}"
    // Kotlin + coroutines
    implementation "androidx.work:work-runtime-ktx:${project.androidx_work__work_runtime_ktx}"
    // optional - GCMNetworkManager support
    //implementation "androidx.work:work-gcm:${project.androidx_work__work_gcm}"

    //https://github.com/youth5201314/banner
    implementation "io.github.youth5201314:banner:${project.io_github_youth5201314__banner}"

    implementation files("./libs/scaffold.aar")

    implementation project(':scaffold_network')

    // https://mvnrepository.com/artifact/commons-codec/commons-codec
    implementation "commons-codec:commons-codec:${project.commons_codec__commons_codec}"

    // 三方登录
    //implementation files('../common_libs/open_sdk_r6019_lite.jar')
    implementation files('../common_libs/open_sdk_3.5.4.11_r3f56456_lite.jar')
    //implementation 'com.sina.weibo.sdk:core:9.12.0:openDefaultRelease@aar'
    implementation files('../common_libs/sina-weibo-sdk-10.10.0.aar')
    //implementation 'com.tencent.mm.opensdk:wechat-sdk-android-with-mta:+'
    implementation "com.tencent.mm.opensdk:wechat-sdk-android-without-mta:${project.com_tencent_mm_opensdk__wechat_sdk_android_without_mta}"
    implementation files('../common_libs/alipaySdk-15.5.9-20181123210601.aar')

}